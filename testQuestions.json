{
    "items": [
      {
       "id": 1,
       "question": "Что будет выведено в console.log?",
       "code": "let c = { greeting: 'Hey!' };\nlet d;\nd = c;\nc.greeting = 'Hello';\nconsole.log(d.greeting);",
       "answersList": ["Hello", "Hey!", "undefined", "ReferenceError", "TypeError"],
       "rightAnswer": "Hello",
       "explanation": "<p>В JavaScript все объекты взаимодействуют по ссылке, если установить их равными друг другу.</p><p>Переменная <span>c</span> содержит ссылку на объект <span>{greeting: 'Hey!'}</span>. А на 3 строчке в <span>d</span> присваивается ссылка на тот же объект, что и в <span>c</span>. А далее перезаписывается поле <span>greeting</span> объекта <span>c</span>.<p/><p>Важно помнить, что объект — это ссылочный тип. И когда вы меняете один объект, вы меняете все те, что ссылаются на один и тот же объект в памяти.<p/>",
       "topics": [
         {
         "name": "Объекты",
          "link": "https://learn.javascript.ru/object"
          }
        ]
      },
      {
        "id": 2,
        "question": "Что возвращает метод массива push?",
        "answersList": ["новый массив", "новый добавленный элемент", "новый размер массива"],
        "rightAnswer": "новый размер массива",
        "explanation": "<p>Метод <span>push</span> добавляет новые элементы в конец и возвращает новый размер массива.</p>",
        "topics": [
          {
            "name": "Методы массивов",
            "link": "https://learn.javascript.ru/array-methods"
          }
        ]
      },
      {
        "id": 3,
        "question": "Что возвращает метод массива shift?",
        "answersList": ["новый массив", "новый добавленный элемент", "удаленный элемент из массива"],
        "rightAnswer": "удаленный элемент из массива",
        "explanation": "<p>Метод <span>shift</span> удаляет первый элемент массива и возвращает его в качестве результата.</p>",
        "topics": [
          {
            "name": "Методы массивов",
            "links": "https://learn.javascript.ru/array-methods"
          }
        ]
      },
      {
        "id": 4,
        "question": "Что делает метод массива unshift?",
        "answersList": ["удаляет первый элемент массива", "добавляет новый элемент в начало массива", "добавляет новый элемент в конец массива"],
        "rightAnswer": "добавляет новый элемент в начало массива",
        "explanation": "<p>Метод <span>unshift</span> добавляет новый элемент в начало и возвращает новый размер массива.</p>",
        "topics": [
          {
            "name": "Методы массивов",
            "links": "https://learn.javascript.ru/array-methods"
          }
        ]
      },
      {
        "id": 5,
        "question": "В каком порядке будут выведены значения?",
        "code": "console.log('A');\nsetTimeout(() => console.log('B'), 0);\nsetTimeout(() => console.log('C'), 0);\nconsole.log('D');",
        "answersList": ["A D B C", "A B C D", "B C A D"],
        "rightAnswer": "A D B C",
        "explanation": "<p>Не смотря на то, что в <span>setTimeout</span> передается 0, задержка все равно будет. <span>setTimeout</span> являетя асинхронным. Сначала выполнится синхронный код, а затем только асинхронный.</p>",
        "topics": [
          {
            "name": "Асинхронность и Event Loop",
            "link": "https://doka.guide/js/async-in-js/"
          }
        ]
      },
      {
        "id": 6,
        "question": "В каком порядке будут выведены значения?",
        "code": "function getInfo(member, year) {\n\tmember.name = 'Tom';\n\tyear = '1990';\n}\n\nconst user = { name: 'John' };\nconst birthYear = '1995';\n\ngetInfo(user, birthYear);\nconsole.log(user, birthYear);",
        "answersList": ["{ name: 'Tom' }, '1995'", "{ name: 'John' }, '1990'", "{ name: 'Tom' }, '1990'", "{ name: 'John' }, '1995'"],
        "rightAnswer": "{ name: 'Tom' }, '1995'",
        "explanation": "<p>Аргументы передаются по значению. Если значение аргумента является объектом, то оно передается по ссылке.<p/><p><span>birthYear</span> ссылается на значение <span>'1995'</span>. Параметр <span>year</span> также имеет ссылку на значение <span>'1995'</span>, но это не то же значение, на которое ссылается <span>birthYear</span>. Когда мы передаем аргументы по значению, создается копия этого значения. Делая year равным <span>'1990'</span>, мы только обновляем значение year, a <span>birthYear</span> по-прежнему равен <span>'1995'</span>.</p><p>Значение <span>user</span> –  это объект, а параметр <span>member</span> ссылается на этот же объект. Когда мы изменяем свойство объекта <span>member</span>, значение <span>user</span> также будет изменено, так как они оба имеют ссылку на один и тот же объект. Cвойство <span>name</span> объекта <span>user</span> теперь будет равно <span>'Tom'</span>.</p>",
        "topics": [
          {
            "name": "Типы данных",
            "link": "https://learn.javascript.ru/types"
          },
          {
            "name": "Объекты",
            "link": "https://learn.javascript.ru/object"
          }
        ]
      },
      {
        "id": 7,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(null == 0);",
        "answersList": ["true", "false"],
        "rightAnswer": "false",
        "explanation": "<p>При нестрогом сравнении <span>null</span> и <span>undefined</span> равны друг другу, но не равны какому-либо другому значению.</p>",
        "topics": [
          {
            "name": "Операторы сравнения",
            "link": "https://learn.javascript.ru/comparison"
          }
        ]
      },
      {
        "id": 8,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(null >= 0);",
        "answersList": ["true", "false"],
        "rightAnswer": "true",
        "explanation": "<p>В данном примере операнды приводятся к числовому значению. <span>null</span> будет приведен к 0, а<span>0</span> останется без изменений. <span>0 > 0</span> - ложное выражение, а вот <span>0 = 0</span> - истинное. Поэтому мы получаем результат true.</p>",
        "topics": [
          {
            "name": "Сравнение null",
            "link": "https://habr.com/ru/company/ruvds/blog/337732/"
          }
        ]
      },
      {
        "id": 9,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(null > 0);",
        "answersList": ["true", "false"],
        "rightAnswer": "false",
        "explanation": "<p>В данном примере операнды приводятся к числовому значению. <span>null</span> будет приведен к 0, а<span>0</span> останется без изменений. <span>0 > 0</span> - ложное выражение.</p>",
        "topics": [
          {
            "name": "Сравнение null",
            "link": "https://habr.com/ru/company/ruvds/blog/337732/"
          }
        ]
      },
      {
        "id": 10,
        "question": "Что будет выведено в console.log?",
        "code": "const a = [];\nconst b = [];\nconsole.log(a + b);",
        "answersList": ["0", "'' - пустая строка", "NaN"],
        "rightAnswer": "'' - пустая строка",
        "explanation": "<p>При сложении операнды приводятся к строковому значению. <span>[ ] - пустой массив</span> будет преобразован к пустой строке. А результат сложения двух пустых строк будет также пустая строка.</span> </p>",
        "topics": [
          {
            "name": "Преобразование массива в строку",
            "link": "https://learn.javascript.ru/array#tostring"
          }
        ]
      },
      {
        "id": 11,
        "question": "Что вернут методы?",
        "code": "const obj = { 1: 'a', 2: 'b', 3: 'c' };\nconst set = new Set([1, 2, 3, 4, 5]);\n\nobj.hasOwnProperty('1');\nobj.hasOwnProperty(1);\nset.has('1');\nset.has(1);",
        "answersList": ["false true false true", "true true true true", "true true false true"],
        "rightAnswer": "true true false true",
        "explanation": "<p>Методы <span>hasOwnProperty</span> и <span>has</span> возвращают логическое значение.</p><p>Метод <span>hasOwnProperty</span> проверяет содержится ли указанное свойство в объекте. Все ключи объекта (за исключением Symbol) являются строками внутри, даже если вы не пишите их в виде строки. Поэтому для <span>obj.hasOwnProperty('1')</span> также возвращает true.</p><p>Метод <span>has</span> проверяет существует ли элемент с указанным значением в объекте <span>Set</span> или нет. Но в случае <span>Set</span> не работает также, как и с обычными объектами. Поэтому для <span>set.has('1')</span> вернется <span>false</span>, поскольку там нет такого значения.</p>",
        "topics": [
          {
            "name": "Объекты", 
            "link": "https://learn.javascript.ru/object"
          },
         { 
           "name": "Set", 
           "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Set"
         },
         {
           "name": "метод has", 
           "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Set/has"
         },
         {
          "name":  "метод hasOwnProperty",
          "link":  "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"
         }
        ]
      },
      {
        "id": 12,
        "question": "Что будет выведено в console.log?",
        "code": "const str = 'aaa@bbb@ccc';\nconsole.log(str.replace('@', '!'));",
        "answersList": ["aaa@bbb@ccc", "aaa!bbb!ccc", "aaa!bbb@ccc"],
        "rightAnswer": "aaa!bbb@ccc",
        "explanation": "<p>Если не указать флаг <span>-g</span>, то будет найдено только одно совпадение.</p><p>Для замены всех символов @, нужно написать следующее:<br><span>str.replace('/@/g', '!');</span></p>",
        "topics": [
          {
            "name": "Метод replace",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/replace"
          }
        ]
      },
      {
        "id": 13,
        "question": "Что будет выведено в console.log?",
        "code": "const a = [1, 2, 3];\nconst b = a;\nb.push(4);\n\nconst c = [1, 2, 3, 4];\n\nconsole.log(a === b);\n\nconsole.log(a === c);",
        "answersList": ["false false", "true true", "true false"],
        "rightAnswer": "true false",
        "explanation": "<p>Объекты и массивы - ссылочный тип данных.</p><p>Переменные <span>а</span> и <span>b</span> ссылаются на один и тот же массив в памяти. Соответственно, меняя что-то в <span>b</span>, изменения коснутся <span>a</span>, и наоборот. Поскольку они ссылаются на один и тот же массив, следовательно они будут равны друг другу.</p><p><span>a</span> и <span>c</span> - это два независимых массива в памяти, в этом случае они не могут быть равны друг другу.</p>",
        "topics": [
          {
            "name": "Хранение по ссылке и по значению",
            "link": "https://doka.guide/js/ref-type-vs-value-type/"
          }
        ]
      },
      {
        "id": 14,
        "question": "Какой из способов не создает строку, где X повторяется 10 раз?",
        "answersList": ["'X'.repeat(10)", "new Array(10).join('X')", "''.padEnd(10, 'X')"],
        "rightAnswer": "new Array(10).join('X')",
        "explanation": "<p>Метод <span>join</span> соединяет между собой элементы массива.</p><p>Поскольку <span>10</span> элемент массива последний, то его не с чем соединять, поэтому строка будет содержать символ <span>X</span>, повторяющийся <span>9</span> раз.</p>",
        "topics": [
          {
            "name": "Метод join",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
          },
          {
            "name": "Метод repeat", 
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/repeat"
          },
          {
            "name": "Метод padEnd",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd"
          }
        ]
      },
      {
        "id": 15,
        "question": "Что будет выведено в console.log?",
        "code": "const arr = ['1', '4', 7, 11].map(parseInt);\n\nconsole.log(arr);",
        "answersList": ["[1, NaN, NaN, 4]", "[1, 4, 7, 11]", "[NaN, NaN, 7, 11]"],
        "rightAnswer": "[1, NaN, NaN, 4]",
        "explanation": "<p>Метод map обычно принимает 3 параметра: <span>arr[i]</span>, <span>i</span>, <span>arr</span>. В данном случае первые два будут переданы в <span>parseInt</span>. <span>arr[i]</span> - элемент, который нужно преобразовать и <span>i</span> - система счисления, в которую нужно преобразовать.</p><p>Первая итерация: <span>parseInt('1', 0)</span> - все окей, т.к. передав <span>0</span>, как систему счисления, то элемент будет преобразован в десятичную.</p><p>Вторая итерация: <span>parseInt('4', 1)</span> - <span>'4'</span> не может быть преобразована, т.к. <span>4</span> нет в единичной системе счисления.</p><p>Третья итерация: <span>parseInt(7, 2)</span> - <span>7</span> не может быть преобразована, т.к. <span>7</span> нет в двоичной системе счисления.</p><p>Четвертая итерация: <span>parseInt(11, 3)</span> - все окей, т.к. <span>11</span> есть в троичной системе счисления.</p>",
        "topics": [
          {
            "name": "Метод parseInt",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt"
          },
          {
            "name": "Системы счисления",
            "link": "https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
          }
        ]
      },
      {
        "id": 16,
        "question": "Что является не итерируемым объектом?",
        "answersList": ["Array", "Set", "Object"],
        "rightAnswer": "Object",
        "explanation": "<p>Итерируемый объект или один из объектов выше из цепочки прототипов должен содержать свойство <span>Symbol.iterator</span>.</p><p>Объекты <span>Array</span>, <span>Set</span>, <span>Map</span>, <span>TypedArray</span>, <span>String</span> являются итерируемыми, т.к. их прототипы содержат данное свойство, а <span>Object</span> не содержит.</p>",
        "topics": [
          {
            "name": "Перебираемые объекты",
            "link": "https://learn.javascript.ru/iterable"
          }
        ]
      },
      {
        "id": 17,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(NaN === NaN);",
        "answersList": ["false", "true", "NaN"],
        "rightAnswer": "false",
        "explanation": "<p><span>NaN</span> является неравным любому другому значению, включая другое значение <span>NaN</span>.</p>",
        "topics": [
          {
          "name": "NaN",
          "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/NaN"
          }
      ]
      },
      {
        "id": 18,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(null instanceof Object);",
        "answersList": ["false", "true", "instanceof is not defined"],
        "rightAnswer": "false",
        "explanation": "<p>Оператор <span>instanceof</span> позволяет проверить к какому классу принадлежит объект с учетом наследования. Он работает только для объектов, а для примитивных значений он возвращает <span>false</span>. А <span>null</span> является  примитивным значением.</p><p>То, что оператор typeof возвращает для <span>null</span> 'object' является багом.</p>",
        "topics": [
          {
            "name": "Оператор instanceof",
            "link": "https://learn.javascript.ru/instanceof"
          }
        ]
      },
      {
        "id": 19,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(parseInt(100, 16));",
        "answersList": ["255", "256", "100, 16"],
        "rightAnswer": "256",
        "explanation": "<p>Метод <span>parseInt</span> принимает 2 аргумента:<br><ul><li>строковое значение, которое необходимо проинтерпретировать</li><li>целое число в диапазоне между 2 и 36, представляющее собой основание системы счисления для первого аргумента</li></ul></p><p>В данном примере происходит конвертация из 16-ричной системы в целое число десятичной системы.</p>",
        "topics": [
          {
            "name": "Метод parseInt", 
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt"
          },
          {
            "name": "Системы счисления",
            "link": "https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F"
          }
        ]
      },
      {
        "id": 20,
        "question": "С помощью какого оператора/метода можно проверить наличие свойства в объекте или в его цепочке прототипов?",
        "answersList": ["in", "hasOwnProperty", "includes"],
        "rightAnswer": "in",
        "explanation": "<p>Оператор <span>in</span> возвращает <span>true</span>, если свойство содержится в указанном объекте или в его цепочке прототипов.</p><p><span>hasOwnProperty</span> также определяет содержит ли объект указанное свойство, но не проверяет существование свойств в цепочке.</p>",
        "topics": [
          {
            "name": "Метод hasOwnProperty",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"
          },
          {
            "name": "оператор in",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/in"
          }
        ]
      },
      {
        "id": 21,
        "question": "Что будет выведено в console.log?",
        "code": "const a = (v) => v * 2,\nconst b = function (v) {\n\treturn v * 2;\n};\n\nconsole.log(a === b, a(4) === b(4));",
        "answersList": ["true, true", "false, true", "false, false"],
        "rightAnswer": "false, true",
        "explanation": "<p><span>a === b</span> будет <span>false</span>. Функции - это объекты, а объекты не могут быть равны друг другу. Они хранятся и копируются по ссылке.</p><p><span>a(4) === b(4)</span> будет <span>true</span>. Вызов функции возвращает результат. В данном случае сравниваются возвращенные значения.</p>",
        "topics": [
          {
            "name": "Хранение по ссылке и по значению",
            "link": "https://doka.guide/js/ref-type-vs-value-type/"
          }
        ]
      },
      {
        "id": 22,
        "question": "В каком порядке будут выведены значения в console.log?",
        "code": "console.log(1);\nsetTimeout(() => {\n\tconsole.log(2);\n}, 0);\nconsole.log(3);",
        "answersList": ["1, 2, 3", "1, 3, 2", "1, 3"],
        "rightAnswer": "1 3 2",
        "explanation": "<p>Сначала выполнится синхронный код, а затем асинхронный.</p><p>Не смотря на то, что в <span>setTimeout</span> передан <span>0</span>, выполнение все равно происходит с небольшой задержкой.</p>",
        "topics": [
          {
            "name": "Асинхронность и Event Loop",
            "link": "https://doka.guide/js/async-in-js/"
          }
        ]
      },
      {
        "id": 23,
        "question": "Что будет выведено в console.log?",
        "code": "let y = 1;\nlet x = y = 2;\n\nconsole.log(x);",
        "answersList": ["1", "2", "undefined"],
        "rightAnswer": "2",
        "explanation": " <p>Присваивание по цепочке начинается справа налево. Сначала <span>y</span> присваивается значение <span>2</span>, а затем в <span>x</span> передается значение переменной <span>у</span>.</p><p>Порядок выполнения кода зависит от приоритета операторов. Если операторы имеют одинаковый приоритет, то порядок зависит от ассоциативности. В данном примере два оператора присваивания <span>(=)</span>, соответсвенно у них одинаковый приоритет. Оператор присваивания имеет ассоциативность справа налево, поэтому данный код будет выполнятся в этом порядке.</p>",
        "topics": [
          {
            "name": "Приоритет и ассоциативность операторов",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"
          }
        ]
      },
      {
        "id": 24,
        "question": "Что будет выведено в console.log?",
        "code": "const a = new Date(2021, 10, 4);\nconst b = new Date(2021, 10, 4);\n\nconsole.log(a === b);",
        "answersList": ["false", "true", "Будет ошибка"],
        "rightAnswer": "false",
        "explanation": "<p><span>new Date</span> создает экземпляр объекта <span>Date</span>. Объекты - это ссылочный тип и если переменные ссылаются на разные объекты в памяти, то они не равны друг другу, даже если имеют одинаковое значение.</p>",
        "topics": [
          {
            "name": "Хранение по ссылке и по значению",
            "link": "https://doka.guide/js/ref-type-vs-value-type/"
          }
        ]
      },
      {
        "id": 25,
        "question": "Что будет выведено в console.log?",
        "code": "const a = [,null,];\n\nconsole.log(a.length);",
        "answersList": ["1", "2", "3"],
        "rightAnswer": "2",
        "explanation": "<p>В данном примере последняя запятая является висящей, а в JavaScript такие запятые игнорируются в массивах и объектах.</p><p>Первый элемент будет <span>undefined</span>, второй - <span>null</span>, третья запятая игнорируется. Соответственно <span>a.length</span> будет <span>2</span>.</p>",
        "topics": [
          {
            "name": "Висящие запятые",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Trailing_commas"
          }
        ]
      },
      {
        "id": 26,
        "question": "Что будет выведено в console.log?",
        "code": "const a = !!'false';\n\nconsole.log(a === true);",
        "answersList": ["false", "true", "Uncaught SyntaxError: expected expression, got '!'"],
        "rightAnswer": "true",
        "explanation": "<p>Если использовать оператор <span>!(НЕ)</span> c не boolean значением, если оно может быть преобразовано в <span>true</span>, то вернется <span>false</span>.</p><p>В этом примере:</p><ol><li>Сначала будет вычисление с первым оператором - <span>!'false'</span>, что вернет <span>false</span>.</li><li>Затем вычисление со вторым оператором - <span>!false</span>, что вернет <span>true</span>.</li></ol><p>Соответственно, переменная a будет равна <span>true</span> и <span>console.log(a === true)</span> вернет <span>true</span>.</p>",
        "topics": [
          {
            "name": "Логическое НЕ (!)",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Logical_NOT"
          }
        ]
      },
      {
        "id": 27,
        "question": "Что будет выведено в console.log?",
        "code": "const num = 5;\n\nconsole.log(+-num);",
        "answersList": ["4", "-5", "Uncaught SyntaxError: expected expression, got '+'"],
        "rightAnswer": "-5",
        "explanation": "<p>Унарный плюс <span>(+)</span> ничего не делает с числами, но если операнд строка, boolean или null, то <span>оператор +</span> преобразует его в число. В примере просто вернется <span>-5</span>.</p>",
        "topics": [
          {
            "name": "Унарный плюс (+)",
            "link": "https://runebook.dev/ru/docs/javascript/operators/unary_plus"
          }
        ]
      },
      {
        "id": 28,
        "question": "Что будет выведено в console.log?",
        "code": "const a = '77' - 10;\nconst b = '77' + 10;\n\nconsole.log(a, b);",
        "answersList": ["68, 87", "NaN, '7710", "67, '7710'"],
        "rightAnswer": "67, '7710'",
        "explanation": "<p><span>Бинарный минус (-)</span>, а также <span>операторы умножения (*) и деления (/)</span> приводят операнды к числу.</p><p><span>Бинарный плюс(+)</span> при сложении строки с операндом другого типа, приводит последний к строке, а затем конкатенирует данные операнды. И результатом такого сложения будет строка.</p>",
        "topics": [
          {
            "name": "Базовые операторы",
            "link": "https://learn.javascript.ru/operators"
          }
        ]
      },
      {
        "id": 29,
        "question": "Что будет выведено в console.log?",
        "code": "const padding-top = 10;\npadding-top = padding-top ** 3;\n\nconsole.log(padding-top);",
        "answersList": ["30", "1000", "SyntaxError: Missing initializer in const declaration"],
        "rightAnswer": "SyntaxError: Missing initializer in const declaration",
        "explanation": "<p>Важно обратить внимание на то, как объявлена переменная, а точнее как написано ее имя. Нельзя именовать переменные через дефис, потому что интерпретатор сочтет его за минус.</p><p>Для имени переменной или функции можно использовать camelCase - <span>paddingTop</span> или snake_case - <span>padding_top</span>. А также в названии допустимо использование символов:<span> 0-9, $, _</span>.</p>",
        "topics": [
          {
            "name": "Имена переменных",
            "link": "https://learn.javascript.ru/variables#name-things-right"
          }
        ]
      },
      {
        "id": 30,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(''.join('|'));",
        "answersList": ["'|'", "''", "TypeError: ''.join is not a function"],
        "rightAnswer": "TypeError: ''.join is not a function",
        "explanation": "<p>Здесь все просто!</p><p>У строки нет метода <span>join</span>.😉</p><p>Изначально у <span>String.prototype</span> нет метода <span>join</span>, поэтому для всех переменных этого типа он не доступен. Данный метод принадлежит <span>Array.prototype</span>.</p>",
        "topics": [
          {
            "name": "Метод join",
            "link": "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
          }
        ]
      },
      {
        "id": 31,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(-5 % 2);",
        "answersList": ["1", "-1", "NaN"],
        "rightAnswer": "-1",
        "explanation": "<p>Результат остатка от деления всегда получает минус (-) от первого операнда.</p><p>Например, вычисление выражения <span>console.log(5 % -2)</span> будет равно <span>1</span>.</p>",
        "topics": [
          {
            "name": "Базовые операторы",
            "link": "https://learn.javascript.ru/operators"
          }
        ]
      },
      {
        "id": 32,
        "question": "Что будет выведено в console.log?",
        "code": "var a = (2, 3, 5);\n\nconsole.log(a);",
        "answersList": ["2", "5", "undefined", "NaN"],
        "rightAnswer": "5",
        "explanation": "<p>Оператор запятая оценивает каждый из своих операндов (слева направо) и возвращает значение последнего операнда.</p>",
        "topics": [
          {
            "name": "Оператор запятая",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator"
          }
        ]
      },
      {
        "id": 33,
        "question": "Что будет выведено в console.log?",
        "code": "console.log(-'25' + 10);",
        "answersList": ["'2510'", "-'2510", "15", "NaN"],
        "rightAnswer": "15",
        "explanation": "<p><p>минус(-) перед строкой — это унарный оператор, который преобразует строку в число и делает ее отрицательной.</p><p>Следовательно, <span>-'34'</span> становится, <span>-34</span>, а затем плюс (+) будет выполнять простое сложение, поскольку оба операнда являются числами.</p></p>",
        "topics": [
          {
            "name": "Базовые операторы",
            "link": "https://learn.javascript.ru/operators"
          }
        ]
      },
      {
        "id": 34,
        "question": "Что будет выведено в console.log?",
        "code": "var a = 1;\nfunction b() {\n\ta = 100;\n\treturn;\n\tfunction a() {}\n}\n\nb();\n\nconsole.log(a);",
        "answersList": ["1", "100", "undefined"],
        "rightAnswer": "1",
        "explanation": "<p>1. Внутри функции <span>b</span> объявление функции <span>function a(){}</span> всплывает и ведет себя как var a = function () {};. Таким образом, в локальной области видимости создается переменная <span>a</span>.</p><p>2. Если у вас есть две переменные с одинаковыми именами (одна глобальная, другая локальная), локальная переменная всегда имеет приоритет над глобальной переменной.</p><p>3. Когда присваивается значение <span>a = 100;</span>, оно присваивается в локальную переменную <span>a</span>, а не глобальную. Следовательно, значение глобальной переменной остается прежним, и в консоль выводится <span>1</span>.</p><p>Дополнительно: если у вас не было функции <span>a</span>, в консоль было бы выведено <span>100</span>.</p>",
        "topics": [
          {
            "name": "Всплытие ",
            "link": "https://developer.mozilla.org/ru/docs/Glossary/Hoisting"
          },
          {
            "name": "Области видимости ",
            "link": "https://doka.guide/js/closures/"
          }
        ]
      }

   ]
 }
