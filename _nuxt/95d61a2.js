(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{424:function(e,n,t){var content=t(434);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(16).default)("752a843a",content,!0,{sourceMap:!1})},433:function(e,n,t){"use strict";t(424)},434:function(e,n,t){var o=t(15)(!1);o.push([e.i,'.v-application{line-height:1.6}.v-application,.v-application .text-h2,.v-application .text-h3,.v-application .text-h4,.v-application .text-h5,.v-application .text-h6{font-family:"Montserrat",sans-serif!important}.btn{display:inline-flex;justify-content:center;align-items:center;min-width:200px;padding:12px 15px;border-radius:5px;font-size:16px}.btn--primary{background-color:#6200ea;color:#fff!important}.btn--disabled{background:hsla(0,0%,100%,.3);color:#ccc}.questions-page__quest-title{font-size:1.8rem;font-weight:500;line-height:1.6}.questions-page__images{display:flex;flex-wrap:wrap;justify-content:center}.questions-page__images img{max-width:70rem;width:100%;margin:1rem 0}.questions-page__answer p{margin:1.5rem 0!important}.questions-page__answer span{font-weight:700}.questions-page__answer h3,.questions-page__answer li{margin-bottom:2rem}.questions-page__answer h4{margin-bottom:1rem}.questions-page__answer h3{margin-top:2rem}.questions-page__answer b,.questions-page__answer h3,.questions-page__answer h4{color:#cba67a}.questions-page__answer div{border-radius:4px;border:2px solid #cba67a;padding:2rem;background-color:#424242;font-weight:400}.questions-page__answer code{display:block;margin:5px 0}',""]),e.exports=o},435:function(e,n,t){var content=t(436);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(16).default)("48751daa",content,!0,{sourceMap:!1})},436:function(e,n,t){var o=t(15)(!1);o.push([e.i,'.v-application{line-height:1.6}.v-application,.v-application .text-h2,.v-application .text-h3,.v-application .text-h4,.v-application .text-h5,.v-application .text-h6{font-family:"Montserrat",sans-serif!important}.btn{display:inline-flex;justify-content:center;align-items:center;min-width:200px;padding:12px 15px;border-radius:5px;font-size:16px}.btn--primary{background-color:#6200ea;color:#fff!important}.btn--disabled{background:hsla(0,0%,100%,.3);color:#ccc}.theme--light.v-expansion-panels .v-expansion-panel{background-color:#fff;color:rgba(0,0,0,.87)}.theme--light.v-expansion-panels .v-expansion-panel--disabled{color:rgba(0,0,0,.38)}.theme--light.v-expansion-panels .v-expansion-panel:not(:first-child):after{border-color:rgba(0,0,0,.12)}.theme--light.v-expansion-panels .v-expansion-panel-header .v-expansion-panel-header__icon .v-icon{color:rgba(0,0,0,.54)}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:hover:before{opacity:.04}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:before,.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:hover:before,.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:focus:before{opacity:.12}.theme--light.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:focus:before{opacity:.16}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:hover:before{opacity:.04}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:before,.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:hover:before,.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:focus:before{opacity:.12}.theme--light.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:focus:before{opacity:.16}.theme--dark.v-expansion-panels .v-expansion-panel{background-color:#1e1e1e;color:#fff}.theme--dark.v-expansion-panels .v-expansion-panel--disabled{color:hsla(0,0%,100%,.5)}.theme--dark.v-expansion-panels .v-expansion-panel:not(:first-child):after{border-color:hsla(0,0%,100%,.12)}.theme--dark.v-expansion-panels .v-expansion-panel-header .v-expansion-panel-header__icon .v-icon{color:#fff}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:hover:before{opacity:.08}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:before,.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:hover:before,.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header:focus:before{opacity:.24}.theme--dark.v-expansion-panels.v-expansion-panels--focusable .v-expansion-panel-header--active:focus:before{opacity:.32}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:hover:before{opacity:.08}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:before,.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:hover:before,.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover:focus:before{opacity:.24}.theme--dark.v-expansion-panels.v-expansion-panels--hover>.v-expansion-panel>.v-expansion-panel-header:hover--active:focus:before{opacity:.32}.v-expansion-panels{border-radius:4px;display:flex;flex-wrap:wrap;justify-content:center;list-style-type:none;padding:0;width:100%;z-index:1}.v-expansion-panels>*{cursor:auto}.v-expansion-panels>:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.v-expansion-panels>:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--active{border-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--active+.v-expansion-panel{border-top-left-radius:4px;border-top-right-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--next-active{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.v-expansion-panels:not(.v-expansion-panels--accordion):not(.v-expansion-panels--tile)>.v-expansion-panel--next-active .v-expansion-panel-header{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.v-expansion-panel{flex:1 0 100%;max-width:100%;position:relative;transition:.3s cubic-bezier(.25,.8,.5,1)}.v-expansion-panel:before{border-radius:inherit;bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:-1;transition:box-shadow .28s cubic-bezier(.4,0,.2,1);box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.v-expansion-panel:not(:first-child):after{border-top:thin solid;content:"";left:0;position:absolute;right:0;top:0;transition:border-color .2s cubic-bezier(.4,0,.2,1),opacity .2s cubic-bezier(.4,0,.2,1)}.v-expansion-panel--disabled .v-expansion-panel-header{pointer-events:none}.v-expansion-panel--active+.v-expansion-panel,.v-expansion-panel--active:not(:first-child){margin-top:16px}.v-expansion-panel--active+.v-expansion-panel:after,.v-expansion-panel--active:not(:first-child):after{opacity:0}.v-expansion-panel--active>.v-expansion-panel-header{min-height:64px}.v-expansion-panel--active>.v-expansion-panel-header--active .v-expansion-panel-header__icon:not(.v-expansion-panel-header__icon--disable-rotate) .v-icon{transform:rotate(-180deg)}.v-expansion-panel-header__icon{display:inline-flex;margin-bottom:-4px;margin-top:-4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.v-application--is-ltr .v-expansion-panel-header__icon{margin-left:auto}.v-application--is-rtl .v-expansion-panel-header__icon{margin-right:auto}.v-expansion-panel-header{align-items:center;border-top-left-radius:inherit;border-top-right-radius:inherit;display:flex;font-size:.9375rem;line-height:1;min-height:48px;outline:none;padding:16px 24px;position:relative;transition:min-height .3s cubic-bezier(.25,.8,.5,1);width:100%}.v-application--is-ltr .v-expansion-panel-header{text-align:left}.v-application--is-rtl .v-expansion-panel-header{text-align:right}.v-expansion-panel-header:not(.v-expansion-panel-header--mousedown):focus:before{opacity:.12}.v-expansion-panel-header:before{background-color:currentColor;border-radius:inherit;bottom:0;content:"";left:0;opacity:0;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .3s cubic-bezier(.25,.8,.5,1)}.v-expansion-panel-header>:not(.v-expansion-panel-header__icon){flex:1 1 auto}.v-expansion-panel-content{display:flex}.v-expansion-panel-content__wrap{padding:0 24px 16px;flex:1 1 auto;max-width:100%}.v-expansion-panels--accordion>.v-expansion-panel{margin-top:0}.v-expansion-panels--accordion>.v-expansion-panel:after{opacity:1}.v-expansion-panels--popout>.v-expansion-panel{max-width:calc(100% - 32px)}.v-expansion-panels--popout>.v-expansion-panel--active{max-width:calc(100% + 16px)}.v-expansion-panels--inset>.v-expansion-panel{max-width:100%}.v-expansion-panels--inset>.v-expansion-panel--active{max-width:calc(100% - 32px)}.v-expansion-panels--flat>.v-expansion-panel:after{border-top:none}.v-expansion-panels--flat>.v-expansion-panel:before{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.v-expansion-panels--tile,.v-expansion-panels--tile>.v-expansion-panel:before{border-radius:0}',""]),e.exports=o},452:function(e,n,t){"use strict";t.r(n);var o={name:"JsQuestions",components:{},data:function(){return{items:[{id:1,question:"Что такое <i>'use strict'</i> в JS и для чего он нужен?",answer:"<p><span>'use strict'</span> (строгий режим) - это директива, которая была введена в ES5.</p><p><span>Без строгого режима</span> синтаксические правила языка не так строги.  Когда происходят некоторые ошибки, система никак не оповещает о них пользователя. Следовательно ошибки могут быть проигнорированы, а код, в котором они допущены, сможет выполняться дальше. Это способно привести к неожиданным результатам выполнения кода.</p><p><span>Строгий режим</span> не даёт системе закрывать глаза на ошибки, выдавая соответствующие исключения. Это приводит к остановке выполнения программ.</p><div><h3>Использование:</h3><ul><li>Директива выглядит как строка: <span>\"use strict\"</span> или <span>'use strict'</span>. Она может быть заключена как в двойные, так и в одинарные кавычки.</li><li>Когда директива находится в начале скрипта, весь сценарий работает в «строгом» режиме.</li><li> Строгий режим можно применять к отдельным функциям. Для того чтобы это сделать — конструкцию <span>\"use strict\"</span> или <span>'use strict'</span> надо поместить в верхнюю часть тела функции, до любых других команд. Строгий режим при таком подходе применяется ко всему, что размещено в теле функции, включая вложенные функции</li><li> В JavaScript-модулях, которые появились в стандарте ES2015, строгий режим включён по умолчанию. Поэтому при работе с ними включать его явным образом не нужно.</li></ul></div>"},{id:2,question:"Что такое <i>ECMAScript</i>?",answer:"<p>Существует ассоциация <span>ECMA</span>, деятельность которой посвящена стандартизации информационных и коммуникационных технологий.</p><p>Версии JavaScript основаны на стандарте <span>ECMAScript</span>. Соответственно, <span>ECMAScript</span> —  это стандарт, а JavaScript — реализация этого стандарта. <span>ECMAScript</span> говорит как должно быть, а JavaScript выполняет то, что говорит <span>ECMAScript</span>.</p><p><span>ES</span> — это просто сокращение для <span>ECMAScript</span>.</p><div><h3>Интересные факты:</h3><ul><li><span>ECMAScript</span> выходит ежегодно.</li><li>Первые пакеты обновления назывались <span>ES1, ES2, ES3, ES4, ES5.</span></li><li> Новые выпуски (начиная с 2015 года) получили название <span>ES2015, ES2016, ES2017</span> и т.д. (аббревиатура ES + год выпуска).</li></ul></div>"},{id:3,question:"Какие типы данных существуют в JS?",answer:"<p>На данный момент в JavaScript 8 типов данных. Они делятся на примитивные и объекты.</p><div><h3>Типы данных:</h3><ul><li>Null</li><li>Undefined</li><li>String(строка)</li><li>Number(число)</li><li>Boolean(логический тип)</li><li>BigInt</li><li>Symbol</li><li>Object</li></ul></div>"},{id:4,question:"Какие значения в JS являются ложными?",answer:"<p>Ложными являются значения, результатом преобразования которых в логическое значение является false.</p><div><h3>Ложные значения:</h3><ul><li>false</li><li>null</li><li>undefined</li><li>NaN</li><li>' ' (пустая строка)</li><li>0</li></ul></div>"},{id:5,question:"Разница между <i>null</i> и <i>undefined</i>?",answer:"<p><span>null</span> – это отсутствие какого-либо значения → значение неизвестно.</p><p><span>undefined</span> – отсутствие присвоенного значения → значение не присвоено.</p><p>Чтобы установить пустое или неизвестное значение, лучше использовать <span>null</span>. <span>undefined</span> используется для проверки было ли присвоено значение.</p><div><h3>Интересные факты</h3><p>При нестрогом сравнении (==) <span>null</span> и <span>undefined</span> равны друг другу, но не равны никакому другому значению.</p><code>console.log(null == undefined); // true</code><br><code>console.log(null == 0); // false</code></div>"},{id:6,question:"Что такое <i>NaN</i>?",answer:"<p><b><i>NaN(Not A Number)</i></b> — это значение, получаемое в результате выполнения числовой операции над нечисловым значениями.<p>Например, вычитание из cтроки числа:</p>",code:"console.log('abc' - 5); // NaN"},{id:7,question:"Разница между <i>let</i>, <i>const</i> и <i>var</i>?",answer:"<h3>var</h3><p>Переменные, объявленные при помощи <b><i>var</i></b>, могут иметь как глобальную, так и локальную область видимости.</p><p>Любая переменная, объявленная при помощи оператора <b><i>var</i></b> вне блока функции, будет доступна в глобальной области видимости.</p><p>Но если переменная объявляется при помощи <b><i>var</i></b> внутри функции, она имеет локальную область видимости. Это означает, что доступ к ней есть только в рамках этой функции.</p><p>Переменные, объявленные при помощи <b><i>var</i></b>, могут как объявляться заново, так и обновляться.</p><code>var num = 4;</code><code>var num = 5; // Ошибки не будет</code><h3>let</h3><p><b><i>let</i></b> имеет блочную область видимости.</p><p>Любой код, окруженный фигурными скобками — блок.</p><p>Переменная, объявленная в блоке кода при помощи оператора <b><i>let</i></b>, доступна для использования только в рамках этого блока кода.</p><p>У переменных, объявленных с помощью <b><i>let</i></b>, значение <b>может быть</b> перезаписано.</p><h3>const</h3><p>Ключевое слово <b><i>const</i></b> — это сокращение от слова 'константа'.</p><p>Как и в случае с <b><i>let</i></b>, у переменных блочная область видимости.</p><p>У переменных, объявленных с помощью <b><i>const</i></b>, значение <b>не может быть</b> перезаписано.</p><div><h3>Интересные факты</h3><p>Вас может ввести в заблуждение то, что переменные, объявленные с помощью <i>const</i>, нельзя перезаписать. Но, на самом деле, нельзя менять только литерал или ссылку. </p><h4>Полезная информация</h4><p>Литерал – это любое значение, указанное явным образом.</p><p>Например, 10 или 'строка' или объект {a:10, b:20}.</p><code>const num = 4;</code><code>num = 5; // TypeError: Литерал изменить нельзя</code><br><p>А вот свойства и значения в объектах мы можем менять.</p><code>const obj = { a: 1 };</code><code>obj.a = 2; // Значения внутри объекта изменить можно</code><code>console.log(obj); //{ a: 2 }</code><code>obj = { a: 3 }; // TypeError: Ссылку менять нельзя</code></div>"},{id:8,question:"Что такое всплытие/поднятие (hoisting)?",answer:"<p>В JavaScript <b><i>всплытие</i></b> -  это механизм, обеспечивающий перемещение объявлений переменных и функций в верх их области видимости перед выполнением кода.</p><p>Например, если обратиться к переменной до ее объявления (это касается переменных, объявленных через <b><i>var</i></b>), то такой код не вызовет ошибку.</p><code>console.log(name); // undefined\nvar name = 'Tom';</code><p>Данный код интерпретируется, таким образом:</p><code>var name;\nconsole.log(name); // undefined\nname = 'Tom';</code><p>Переменные, объявленные при помощи <b><i>var</i></b>, поднимаются в верх своей области видимости и инициализируются присвоением какого-нибудь значения или undefined.</p><p>Объявления переменных при помощи <b><i>let</i></b> и <b><i>const</i></b> тоже поднимаются вверх. Но в отличие от переменных, объявленных при помощи <b><i>var</i></b>, которые могут инициализироваться, как undefined, ключевые слова <b><i>let</i></b> и <b><i>const</i></b> такого не позволяют.</p><p>Если попытаться использовать переменную, объявленную при помощи <b><i>let</i></b> и <b><i>const</i></b>, до ее объявления, вы получите ReferenceError.</p>"},{id:9,question:"В чем разница между == и === ?",answer:"<p><b><i>== ('нестрогое' сравнение)</i></b> - приводит операнды к одному типу данных(числам) и сравнивает значения.</p><h4>Пример</h4><code>console.log(true == 1); // будет true, т.к. true конвертируется в 1</code><p><b><i>=== ('строгое' сравнение)</i></b> - сравнивает операнды, учитывая их тип.</p><h4>Пример</h4><code>console.log(true === 1); // будет false, т.к. это разные типы данных</code>"},{id:10,question:"В чем разница между <i>Function Expression</i> и <i>Function Declaration</i>?",answer:"<h3>Function Declaration</h3><ul><li>Cоздаются интерпретатором до выполнения кода, поэтому их можно вызвать до объявления;</li></ul><h4>Пример</h4><pre><code>function add(a, b) {<br>  return a + b;<br>};</code></pre><h3>Function Expression</h3><ul><li>Такая функция не может быть вызвана раньше объявления, т.к. она создается тогда, когда до нее доходит поток кода.</li><li>Имя функции может будет опущено, тогда она будет анонимной.</li></ul><h4>Пример</h4><pre><code>const add = function(a, b) {<br>  return a + b;<br>};</code></pre>"},{id:11,question:"Что такое стрелочные функции? Их отличие от обычных?",answer:"<p><b><i>Стрелочные функции</i></b> - это простой и лаконичный синтаксис для создания функций, который появился в ES6.</p><h4>Отличия:</h4><ul><li>Они не имеют собственного контекста (this);</li><li>Не имеет собственного объекта arguments;</li><li>Не могут быть использованы как конструктор и вызовут ошибку при использовании с new;</li></ul>",code:"const sum = (a, b) => a + b;\n\n// Вместо\n\nconst sum = function (a, b) {\n\treturn a + b;\n}"},{id:12,question:"Что такое <i>IIFE</i>?",answer:"<p><b><i>IIFE(Immediately Invoked Function Expression)</i></b> -  это конструкция, позволяющая вызывать функцию непосредственно после ее определения. Используется для инкапсуляции данных.</p><h4>Синтаксис</h4>",code:"(function () {\n\t// Your code\n})()"},{id:13,question:"Что такое <i>this</i>?",answer:"<p><b><i>this</i></b> - это контекст вызова или проще говоря это указание на объект перед точкой в контексте которого исполняется функция.</p><p>В определенных ситуациях <b><i>this</i></b> может быть:</p><ol><li>Внутри функций:</li><p>При 'use strict' this будет <b><i>undefined</i></b>.</p><p> Без 'use strict' this ссылается на <b><i>window</i></b>.</p><li>Стрелочные функции не имеют своего контекста выполнения, они берут значение this у функции окружения. Если функция окружения отсутствует, this ссылается на <b><i>window</i></b>.</li><li>Если функция вызывается как метод объекта, то этот <b><i>объект</i></b> становится значением this.</li><li>Внутри setTimeout, значение this это объект <b><i>window</i></b>.</li><li>Если вы создаете объект с помощью ключевого слова new, то this будет этим <b><i>новым объектом</i></b>.</li><li>В обработчиках событий, значением this будет <b><i>элемент, который вызвал событие</i></b>.</li><li>Значение this можно назначить любому объекту через методы <b><i>bind, call и apply</i></b>, передав этот объект первым параметром.</li></ol>"},{id:14,question:"Для чего используются методы <i>call, bind, apply</i>? Какая разница между ними?",answer:"<p><b><i>call, bind</i></b> и <b><i>apply</i></b> используются для привязки определенного объекта к значению <b><i>this</i></b> вызываемой функции.</p><ul><li>Метод <b><i>call</i></b> принимает аргументы просто через запятую, а метод <b><i>apply</i></b> в виде массива.</li><li><b><i>call</i></b> и <b><i>apply</i></b> сразу же вызывают функцию в отличие от <b><i>bind</i></b>.</li><li><b><i>bind </i></b> необходимо вызывать. Аргументы можно передавать в сам метод и его вызов.</li></ul>",code:"const obj1 = {\n\tresult: 0\n}\n\nconst obj2 = {\n\tresult: 0\n}\n\nconst obj3 = {\n\tresult: 0\n}\n\nfunction sumAll() {\n\tlet result = 0;\n\tfor (let i = 0, len = arguments.length; i < len; i++) {\n\t\tresult += arguments[i];\n\t}\n\treturn this.result = result;\n}\n\nsumAll.apply(obj1, [1, 2, 3, 4, 5]); // 15\nsumAll.call(obj2, 10, 5); // 15\nsumAll.bind(obj3, 5, 10)(); // 15\nsumAll.bind(obj3, 5, 5)(5); // 15"},{id:15,question:"Что такое область видимости?",answer:"<p><b><i>Область видимости или scope</i></b> - это часть программы, в которой мы можем обратиться к переменной, функции или объекту. Области видимости помогают скрывать переменные от нежелательного доступа, управлять побочными эффектами и разбивать код на смысловые блоки. Существуют <b><i>глобальная и локальная области видимости</i></b>.</p><h3>Глобальная область видимости</h3><p>Когда мы просто объявляем переменную, вне функций, вне модулей или блоков в фигурных скобках, то эта переменная попадает в глобальную область видимости.</p><h3>Локальная область видимости</h3><p>Блоки цикла, функций, условий, IIFE - все это локальный области для объявленных в них переменных. Доступ к таким переменным не возможен извне, только из других вложенных блоков кода.</p><h4>Пример</h4>",code:"function outer() {\n\tfunction inner(){\n\t\tconst a = 10;\n\t}\n\tconsole.log(a); // здесь переменная a не доступна\n}\n\n\nfunction outer() {\n\tconst a = 10;\n\tfunction inner() {\n\t\tconsole.log(a); // здесь переменная a будет доступна\n\t}\n}"},{id:16,question:"Что такое DOM?",answer:"<p><b><i>Объектная Модель Документа (DOM)</i></b> является программным интерфейсом для HTML, XML и SVG документов. DOM чаще всего используется в JavaScript, но не является его частью, поэтому иногда с DOM работают в других языках.</p><h3>Главные моменты:</h3><ul><li>DOM является объектным представлением HTML-документа;</li> <li>Согласно этому, каждый HTML-тег является объектом;</li>  <li>Текст, который находится внутри тега, также является объектом;</li><li>Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы;</li></ul>"},{id:17,question:"Что такое прототипное наследование?",answer:"<p>В JavaScript все является объектами. Эти объекты связаны цепочками прототипов, по которым им передаются методы и свойства.</p><p>При обращении к свойству или методу объекта сначала происходит поиск этого свойства у самого объекта. В случае отсутствия у этого объекта, поиск перенаправляется в его прототип, затем в прототип прототипа и так далее, пока искомое свойство не будет найдено, либо пока не закончится цепочка прототипов.</p>"},{id:18,question:"Что такое цикл событий (Event Loop)?",answer:"<p><b><i>Стек вызовов(call stack)</i></b> - это структура данных (первым вошел, последним вышел), используемая для отслеживания порядка выполнения функций в текущем контексте (области видимости).</p><p><b><i>Очередь задач(callback queue)</i></b> - это структура данных (первым вошел, первым вышел), используемая для отслеживания выполнения асинхронных функций, готовых оказаться в стеке вызовов.</p><p><b><i>Web APIs</i></b> предоставляются браузером и исполняют функцию дополнительного потока (помним, что JavaScript однопоточный язык).  Данный искусственный поток позволяет исполнять множество задач в один момент времени, а нужно это для того, чтобы call stack не блокировался. Web APIs, предоставляемые браузером: DOM, setTimeout, setInterval, fetch и др.</p><b><i>Цикл событий(event loop)</i></b> - это механизм, на каждом тике выполняющий функции из стека вызовов и, если он оказывается пустым, перемещающий задачи из очереди задач в стек вызовов для выполнения.</p><p>Разберем выполнение данного кода:</p>",code:"console.log('first');\n\nsetTimeout(() => {\n\tconsole.log('second');\n}, 1000);\n\nconsole.log('third);",images:["../js_quest/event_loop/slide_1.png","../js_quest/event_loop/slide_2.png","../js_quest/event_loop/slide_3.png","../js_quest/event_loop/slide_4.png","../js_quest/event_loop/slide_5.png"]},{id:19,question:"Что такое всплытие и погружение событий?",answer:"<p>Когда событие происходит в элементе DOM, оно затрагивает не только этот элемент.</p><h3>Принцип всплытия такой:</h3><p>Когда на элементе происходит событие, оно сначала срабатывает на нем, затем на его родителе и так вверх по цепочке предков, пока не достигает объекта Window.</p>  <p>События <b><i>focus</i></b> и <b><i>blur</i></b> не всплывают.</p><h3>Погружение(перехват):</h3><p>Это когда событие сначала путешествует по цепочке от объекта Window вниз, достигает элемент и затем уже происходит всплытие.</p><p>Чтобы поймать событие на стадии погружения, нужно использовать аргумент <b><i>capture</i></b> в значении <b><i>true</i></b>. По умолчанию он <b><i>false</i></b>, что означает, что событие будет поймано при всплытии.</p><p>Чтобы узнать на каком элементе произошло событие, можно воспользоваться объектом event и его свойством target.</p>"},{id:20,question:"Что такое <i>event.target</i> и <i>event.currentTarget</i>?",answer:"<p>Свойства target и currentTarget интерфейса Event является ссылкой на объект, который был инициатором события.</p><p><b><i>event.target</i></b> - элемент, вызвавший событие.</p><p><b><i>event.currentTarget</i></b> - элемент, на который была совершена подписка (у которого вы вызывали addEventListener).</p><p>target и currentTarget одинаковые, когда нет восходящей цепочки, но когда используется делегирование событий, они разные.</p>"},{id:21,question:"В чем разница между методами <i>event.preventDefault()</i> и <i>event.stopPropagation()</i>?",answer:"<p>Метод <b><i>event.preventDefault()</i></b> отключает поведение элемента по умолчанию. Например, отмена перехода на другую страницу при клике на тэг <b><i>a</i></b> или предотвращение отправки формы.</p><p>Метод <b><i>event.stopPropagation()</i></b> отключает распространение события (его всплытие или погружение).</p>"},{id:22,question:"В чем разница между методами <i>event.stopPropagation()</i> и <i>event.stopImmediatePropagation()</i>?",answer:"<p><b><i>event.stopPropagation()</i></b> препятствует продвижению события дальше, но на текущем элементе все обработчики будут вызваны.</p><p><b><i>event.stopImmediatePropagation()</i></b> останавливает цепочку вызова событий для последующих обработчиков DOM-элемента. Если несколько обработчиков прикреплены к одному и тому же элементу с одинаковым типом события, тогда они будут вызваны в порядке своего добавления. Если один из этих обработчиков вызовет <b><i>event.stopImmediatePropagation()</i></b>, тогда события оставшихся обработчиков вызваны не будут.</p>"},{id:23,question:"Что такое прием делегирования и как он реализуется?",answer:"<p>Всплытие событий позволяет реализовать прием делегирования. Обработчик вешается на родителя и затем с помощью <b><i>event.target</i></b> выполняется проверка на каком элементе произошло событие.</p><p>Преимущество данного приема в том, что это будет так же работать на элементах, которые будут добавляться впоследствии.</p>"},{id:24,question:"Как проверить, является ли значение массивом?",answer:"<p>Проверку можно выполнить с помощью метода Array.isArray:</p>",code:"Array.isArray(5); // false\nArray.isArray([1, 2, 3]); // true"},{id:25,question:"Какими способами можно перебрать массив в JavaScript?",answer:"<h4>Перебор массива с помощью:</h4><ul><li>метода <b><i>forEach</i></b> - для перебора массива</li><li>цикла <b><i>for</i></b> - для перебора массива</li><li>метод <b><i>filter</i></b> - для фильтрации</li><li>метод <b><i>map</i></b> - для трансформации</li><li>методы <b><i>reduce/reduceRight</i></b> - для прохода по массиву с вычислением значения</li><li>методы <b><i>every/some</i></b> - для проверки массива</li></ul>"},{id:26,question:"В чем различие между map и forEach?",answer:"<h4>Различия между map и forEach:</h4><ul><li><b><i>map</i></b> возвращает новый массив, а <b><i>forEach</i></b> нет.</li><li>Если над элементами массива производились какие-то изменения, то в случае с <b><i>forEach</i></b> будет изменен исходный массив, а с <b><i>map</i></b> нет.</li><li>После <b><i>map</i></b> можно использовать методы -  <b><i>reduce, sort, filter</i></b>, после <b><i>forEach</i></b> нет.</li></ul>",code:"const arr = [1, 2, 3, 4, 5]\n\narr.forEach(x => x * x).reduce((total, value) => total + value); // Uncaught TypeError: Cannot read property 'reduce' of undefined\n\narr.map(x => x * x).reduce((total, value) => total + value);"},{id:27,question:"Как создать объект в JavaScript?",answer:"<h4>С помощью:</h4><ul><li>Объектного литерала</li><li>Функции-конструктора</li><li>оператора new</li><li>метода Object.create()</li></ul>",code:"// Объектный литерал\n\nconst user = {\n\tname: 'Bob'\n}\n\n// Функция-конструктор\n\nfunction User(name){\n\tthis.name = name;\n}\nconst newUser = new User('Bob');\n\n// Оператор new\n\nconst user = new Object();\nuser.name = 'Bob';\n\n// метод Object.create()\n\nconst user = Object.create(null);\nuser.name = 'Bob';"}]}}},r=(t(433),t(36)),l=t(125),c=t.n(l),d=(t(13),t(10),t(12),t(5),t(17),t(11),t(18),t(2)),v=t(151),h=t(129),x=t(1),f=t(9);function m(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}var w=Object(f.a)(Object(v.a)("expansionPanels","v-expansion-panel","v-expansion-panels"),Object(h.b)("expansionPanel",!0)).extend({name:"v-expansion-panel",props:{disabled:Boolean,readonly:Boolean},data:function(){return{content:null,header:null,nextIsActive:!1}},computed:{classes:function(){return function(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?m(Object(source),!0).forEach((function(n){Object(d.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):m(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}({"v-expansion-panel--active":this.isActive,"v-expansion-panel--next-active":this.nextIsActive,"v-expansion-panel--disabled":this.isDisabled},this.groupClasses)},isDisabled:function(){return this.expansionPanels.disabled||this.disabled},isReadonly:function(){return this.expansionPanels.readonly||this.readonly}},methods:{registerContent:function(e){this.content=e},unregisterContent:function(){this.content=null},registerHeader:function(e){this.header=e,e.$on("click",this.onClick)},unregisterHeader:function(){this.header=null},onClick:function(e){e.detail&&this.header.$el.blur(),this.$emit("click",e),this.isReadonly||this.isDisabled||this.toggle()},toggle:function(){var e=this;this.$nextTick((function(){return e.$emit("change")}))}},render:function(e){return e("div",{staticClass:"v-expansion-panel",class:this.classes,attrs:{"aria-expanded":String(this.isActive)}},Object(x.m)(this))}}),y=t(195),_=t(251),O=t(34),j=Object(f.a)(_.a,O.a,Object(h.a)("expansionPanel","v-expansion-panel-content","v-expansion-panel")).extend().extend({name:"v-expansion-panel-content",data:function(){return{isActive:!1}},computed:{parentIsActive:function(){return this.expansionPanel.isActive}},watch:{parentIsActive:{immediate:!0,handler:function(e,n){var t=this;e&&(this.isBooted=!0),null==n?this.isActive=e:this.$nextTick((function(){return t.isActive=e}))}}},created:function(){this.expansionPanel.registerContent(this)},beforeDestroy:function(){this.expansionPanel.unregisterContent()},render:function(e){var n=this;return e(y.a,this.showLazyContent((function(){return[e("div",n.setBackgroundColor(n.color,{staticClass:"v-expansion-panel-content",directives:[{name:"show",value:n.isActive}]}),[e("div",{class:"v-expansion-panel-content__wrap"},Object(x.m)(n))])]})))}}),E=t(126),P=t(98);function k(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}function S(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?k(Object(source),!0).forEach((function(n){Object(d.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):k(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}var A=Object(f.a)(O.a,Object(h.a)("expansionPanel","v-expansion-panel-header","v-expansion-panel")).extend().extend({name:"v-expansion-panel-header",directives:{ripple:P.a},props:{disableIconRotate:Boolean,expandIcon:{type:String,default:"$expand"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1}},data:function(){return{hasMousedown:!1}},computed:{classes:function(){return{"v-expansion-panel-header--active":this.isActive,"v-expansion-panel-header--mousedown":this.hasMousedown}},isActive:function(){return this.expansionPanel.isActive},isDisabled:function(){return this.expansionPanel.isDisabled},isReadonly:function(){return this.expansionPanel.isReadonly}},created:function(){this.expansionPanel.registerHeader(this)},beforeDestroy:function(){this.expansionPanel.unregisterHeader()},methods:{onClick:function(e){this.$emit("click",e)},genIcon:function(){var e=Object(x.m)(this,"actions")||[this.$createElement(E.a,this.expandIcon)];return this.$createElement(y.b,[this.$createElement("div",{staticClass:"v-expansion-panel-header__icon",class:{"v-expansion-panel-header__icon--disable-rotate":this.disableIconRotate},directives:[{name:"show",value:!this.isDisabled}]},e)])}},render:function(e){var n=this;return e("button",this.setBackgroundColor(this.color,{staticClass:"v-expansion-panel-header",class:this.classes,attrs:{tabindex:this.isDisabled?-1:null,type:"button","aria-expanded":this.isActive},directives:[{name:"ripple",value:this.ripple}],on:S(S({},this.$listeners),{},{click:this.onClick,mousedown:function(){return n.hasMousedown=!0},mouseup:function(){return n.hasMousedown=!1}})}),[Object(x.m)(this,"default",{open:this.isActive},!0),this.hideActions||this.genIcon()])}}),C=(t(193),t(194),t(435),t(159)),M=t(8);function D(object,e){var n=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),n.push.apply(n,t)}return n}function I(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?D(Object(source),!0).forEach((function(n){Object(d.a)(e,n,source[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):D(Object(source)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(source,n))}))}return e}var B=C.a.extend({name:"v-expansion-panels",provide:function(){return{expansionPanels:this}},props:{accordion:Boolean,disabled:Boolean,flat:Boolean,hover:Boolean,focusable:Boolean,inset:Boolean,popout:Boolean,readonly:Boolean,tile:Boolean},computed:{classes:function(){return I(I({},C.a.options.computed.classes.call(this)),{},{"v-expansion-panels":!0,"v-expansion-panels--accordion":this.accordion,"v-expansion-panels--flat":this.flat,"v-expansion-panels--hover":this.hover,"v-expansion-panels--focusable":this.focusable,"v-expansion-panels--inset":this.inset,"v-expansion-panels--popout":this.popout,"v-expansion-panels--tile":this.tile})}},created:function(){this.$attrs.hasOwnProperty("expand")&&Object(M.a)("expand","multiple",this),Array.isArray(this.value)&&this.value.length>0&&"boolean"==typeof this.value[0]&&Object(M.a)(':value="[true, false, true]"',':value="[0, 2]"',this)},methods:{updateItem:function(e,n){var t=this.getValue(e,n),o=this.getValue(e,n+1);e.isActive=this.toggleMethod(t),e.nextIsActive=this.toggleMethod(o)}}}),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"page questions-page"},[t("h2",{staticClass:"page questions-page page__title text-h2 font-weight-bold mb-8"},[e._v("\n    Вопросы и ответы к собеседованию по JavaScript\n  ")]),e._v(" "),t("v-expansion-panels",e._l(e.items,(function(n,i){return t("v-expansion-panel",{key:i},[t("v-expansion-panel-header",{staticClass:"questions-page__quest-title pa-6"},[t("div",{domProps:{innerHTML:e._s(i+1+". "+n.question)}})]),e._v(" "),t("v-expansion-panel-content",[t("div",{staticClass:"questions-page__answer",domProps:{innerHTML:e._s(n.answer)}}),e._v(" "),n.code?t("highlightjs",{staticClass:"mb-3",attrs:{language:"javascript",code:n.code}}):e._e(),e._v(" "),n.images?t("div",{staticClass:"questions-page__images"},e._l(n.images,(function(img,i){return t("img",{key:"img"+i,attrs:{src:img,alt:""}})})),0):e._e()],1)],1)})),1)],1)}),[],!1,null,null,null);n.default=component.exports;c()(component,{VExpansionPanel:w,VExpansionPanelContent:j,VExpansionPanelHeader:A,VExpansionPanels:B})}}]);